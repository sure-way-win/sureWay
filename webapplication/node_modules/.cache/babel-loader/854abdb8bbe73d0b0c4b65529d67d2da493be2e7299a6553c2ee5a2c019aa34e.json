{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\GitHub\\\\e19-3yp-School-Van-Tracking-System\\\\code\\\\webapplication\\\\src\\\\components\\\\LocationTracking.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { APIProvider, Map, useMapsLibrary, useMap } from \"@vis.gl/react-google-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketClient = props => {\n  _s();\n  const {\n    bus\n  } = props.location.state || {}; // Add default value for destructuring\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Replace 'http://localhost:3001' with the URL where your Socket.IO server is running\n    const socket = io(\"http://13.51.79.199:3001\");\n\n    // Event handler for receiving messages from the server\n    socket.on(bus === null || bus === void 0 ? void 0 : bus.ThingName, message => {\n      console.log(\"Received message from server:\", message);\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n\n    // Event handler for connecting to the Socket.IO server\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to Socket.IO server\");\n    });\n\n    // Event handler for potential errors\n    socket.on(\"error\", error => {\n      console.error(\"Socket.IO error:\", error);\n      // Handle the error as needed\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      console.log(\"Disconnecting from Socket.IO server\");\n      socket.disconnect();\n    };\n  }, []); // Empty dependency array ensures that the effect runs only once\n\n  // Log the current state of messages whenever it changes\n  useEffect(() => {\n    console.log(\"Current messages state:\", messages);\n  }, [messages]);\n  const possition = {\n    lat: 6.801803,\n    lng: 79.922684\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"80vh\",\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(APIProvider, {\n      apiKey: \"AIzaSyD3iZ52fsbEPy64MJPTVxJLlePde16xAMc\",\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        center: possition,\n        zoom: 12,\n        mapId: \"5e1c67490bdc79a3\"\n        // fullscreenControl={false}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketClient, \"BxyhfWWpnSbijcu7qFgrB+X/mWM=\");\n_c = SocketClient;\nexport default SocketClient;\nvar _c;\n$RefreshReg$(_c, \"SocketClient\");","map":{"version":3,"names":["React","useEffect","useState","io","APIProvider","Map","useMapsLibrary","useMap","jsxDEV","_jsxDEV","SocketClient","props","_s","bus","location","state","messages","setMessages","socket","on","ThingName","message","console","log","prevMessages","error","disconnect","possition","lat","lng","style","height","width","children","apiKey","center","zoom","mapId","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/GitHub/e19-3yp-School-Van-Tracking-System/code/webapplication/src/components/LocationTracking.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport {\r\n  APIProvider,\r\n  Map,\r\n  useMapsLibrary,\r\n  useMap,\r\n} from \"@vis.gl/react-google-maps\";\r\n\r\nconst SocketClient = (props) => {\r\n  const { bus } = props.location.state || {}; // Add default value for destructuring\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Replace 'http://localhost:3001' with the URL where your Socket.IO server is running\r\n    const socket = io(\"http://13.51.79.199:3001\");\r\n\r\n    // Event handler for receiving messages from the server\r\n    socket.on(bus?.ThingName, (message) => {\r\n      console.log(\"Received message from server:\", message);\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    // Event handler for connecting to the Socket.IO server\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"Connected to Socket.IO server\");\r\n    });\r\n\r\n    // Event handler for potential errors\r\n    socket.on(\"error\", (error) => {\r\n      console.error(\"Socket.IO error:\", error);\r\n      // Handle the error as needed\r\n    });\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      console.log(\"Disconnecting from Socket.IO server\");\r\n      socket.disconnect();\r\n    };\r\n  }, []); // Empty dependency array ensures that the effect runs only once\r\n\r\n  // Log the current state of messages whenever it changes\r\n  useEffect(() => {\r\n    console.log(\"Current messages state:\", messages);\r\n  }, [messages]);\r\n\r\n  const possition = { lat: 6.801803, lng: 79.922684 };\r\n\r\n  return (\r\n    <div style={{ height: \"80vh\", width: \"100%\" }}>\r\n      {/* <h1>Received AWS IoT Messages:</h1>\r\n      <ul>\r\n        {messages.map((message, index) => (\r\n          <li key={index}>{JSON.stringify(message)}</li>\r\n        ))}\r\n      </ul> */}\r\n      <APIProvider apiKey=\"AIzaSyD3iZ52fsbEPy64MJPTVxJLlePde16xAMc\">\r\n        <Map\r\n          center={possition}\r\n          zoom={12}\r\n          mapId=\"5e1c67490bdc79a3\"\r\n          // fullscreenControl={false}\r\n        ></Map>\r\n      </APIProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocketClient;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SACEC,WAAW,EACXC,GAAG,EACHC,cAAc,EACdC,MAAM,QACD,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAI,CAAC,GAAGF,KAAK,CAACG,QAAQ,CAACC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,MAAM,GAAGf,EAAE,CAAC,0BAA0B,CAAC;;IAE7C;IACAe,MAAM,CAACC,EAAE,CAACN,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEO,SAAS,EAAGC,OAAO,IAAK;MACrCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,OAAO,CAAC;MACrDJ,WAAW,CAAEO,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,OAAO,CAAC,CAAC;IAC3D,CAAC,CAAC;;IAEF;IACAH,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBG,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,CAAC;;IAEF;IACAL,MAAM,CAACC,EAAE,CAAC,OAAO,EAAGM,KAAK,IAAK;MAC5BH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXH,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClDL,MAAM,CAACQ,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAzB,SAAS,CAAC,MAAM;IACdqB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,QAAQ,CAAC;EAClD,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMW,SAAS,GAAG;IAAEC,GAAG,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAU,CAAC;EAEnD,oBACEpB,OAAA;IAAKqB,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eAO5CxB,OAAA,CAACL,WAAW;MAAC8B,MAAM,EAAC,yCAAyC;MAAAD,QAAA,eAC3DxB,OAAA,CAACJ,GAAG;QACF8B,MAAM,EAAER,SAAU;QAClBS,IAAI,EAAE,EAAG;QACTC,KAAK,EAAC;QACN;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAzDIF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AA2DlB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}